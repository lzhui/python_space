#!/usr/bin/python
# -*- coding: UTF-8 -*-
#正则表达式
import re
if re.match(r'^\d{3}\-\d{3,8}$', '010-12345'):
    print "ok"
else:
    print "failed"
print re.match(r'^\d{3}\-\d{3,8}$', '010 12345')
#用正则表达式切分字符串比用固定的字符更灵活，请看正常的切分代码：
print 'a b   c'.split(' ')
#嗯，无法识别连续的空格，用正则表达式试试：
print re.split(r'\s+', 'a b   c')
#无论多少个空格都可以正常分割。加入,试试：
print re.split(r'[\s\,]+', 'a,b, c  d')
#再加入;试试：
print re.split(r'[\s\,\;]+', 'a,b;; c  d')
'''
分组
除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：
^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：
'''
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print m
print m.group(0)
print m.group(1)
print m.group(2)
'''
如果正则表达式中定义了组，就可以在Match对象上用group()方法提取出子串来。
注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。
提取子串非常有用。来看一个更凶残的例子：
'''
t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print m.groups()


'''
贪婪匹配
最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：
'''
print re.match(r'^(\d+)(0*)$', '102300').groups()
'''
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配
'''
print re.match(r'^(\d+?)(0*)$', '102300').groups()

re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
print re_telephone.match('010-12345').groups()
print re_telephone.match('010-8086').groups()




